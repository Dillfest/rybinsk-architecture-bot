import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import BadRequest

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
arch_objects = {
    "stalinckiy_ampir": {
        "name": "–ñ–∏–ª—ã–µ –¥–æ–º–∞ —Å—Ç–∞–ª–∏–Ω—Å–∫–æ–π —ç–ø–æ—Ö–∏",
        "description": "–¢–∏–ø–∏—á–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å—Ç–∞–ª–∏–Ω—Å–∫–æ–≥–æ –∞–º–ø–∏—Ä–∞ —Å –º–∞—Å—Å–∏–≤–Ω—ã–º–∏ –∫–∞—Ä–Ω–∏–∑–∞–º–∏ –∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º —Ñ–∞—Å–∞–¥–æ–º.",
        "year": "1960-–µ",
        "address": "–ë—É–ª—å–≤–∞—Ä–Ω–∞—è, 8",
        "photo": "https://autotravel.ru/phalbum/91512/192.jpg"
    },
    "dom_sovetov": {
        "name": "–ñ–∏–ª–æ–π –º–Ω–æ–≥–æ–∫–≤–∞—Ä—Ç–∏—Ä–Ω—ã–π –¥–æ–º –Ω–∞ —É–ª–∏—Ü–µ –ì–µ—Ä—Ü–µ–Ω–∞",
        "description": "–ó–¥–∞–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–∏–∑–º–∞, –≥–¥–µ —Ä–∞–∑–º–µ—â–∞–ª–∏—Å—å –≥–æ—Ä–æ–¥—Å–∫–∏–µ –≤–ª–∞—Å—Ç–∏.",
        "year": "1960-–µ",
        "address": "—É–ª. –ì–µ—Ä—Ü–µ–Ω–∞, 39",
        "photo": "https://rybinsklift.ru/images/news/komfort/120723.jpg"
    },
    "dvorec_kultury": {
        "name": "–î–≤–æ—Ä–µ—Ü –∫—É–ª—å—Ç—É—Ä—ã ¬´–ê–≤–∏–∞—Ç–æ—Ä¬ª",
        "description": "–ü–æ—Å—Ç—Ä–æ–µ–Ω –≤ —Å—Ç–∏–ª–µ —Å—Ç–∞–ª–∏–Ω—Å–∫–æ–≥–æ –Ω–µ–æ–∫–ª–∞—Å—Å–∏—Ü–∏–∑–º–∞ —Å –∫–æ–ª–æ–Ω–Ω–∞–º–∏ –∏ –±–∞—Ä–µ–ª—å–µ—Ñ–∞–º–∏. –í–Ω—É—Ç—Ä–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∑–∞–ª, –ª–µ–ø–Ω–∏–Ω–∞ –∏ —Å–æ–≤–µ—Ç—Å–∫–∏–µ –º–æ–∑–∞–∏–∫–∏.",
        "year": "1950-–µ",
        "address": "—É–ª. –ö–∏—Ä–æ–≤–∞, 12",
        "photo": "https://goru.travel/storage/app/uploads/public/5ac/339/048/5ac339048a981087790283.jpg"
    }
}


def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–æ–º –°–æ–≤–µ—Ç–æ–≤", callback_data="dom_sovetov")],
        [InlineKeyboardButton("–ñ–∏–ª–æ–π –∫–æ–º–ø–ª–µ–∫—Å", callback_data="stalinckiy_ampir")],
        [InlineKeyboardButton("–î–≤–æ—Ä–µ—Ü –∫—É–ª—å—Ç—É—Ä—ã", callback_data="dvorec_kultury")],
        [InlineKeyboardButton("–û –ø—Ä–æ–µ–∫—Ç–µ", callback_data="about")]
    ])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–≥–∏–¥ –ø–æ —Å–æ–≤–µ—Ç—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –†—ã–±–∏–Ω—Å–∫–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"

    try:
        if update.message:
            await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())
        else:
            await update.callback_query.edit_message_text(text, reply_markup=get_main_menu_keyboard())
    except BadRequest as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await update.callback_query.message.reply_text(text, reply_markup=get_main_menu_keyboard())


async def show_architecture_object(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ"""
    query = update.callback_query
    await query.answer()

    obj = arch_objects[object_id]
    message_text = (
        f"üèõ <b>{obj['name']}</b>\n\n"
        f"<i>–ì–æ–¥—ã –ø–æ—Å—Ç—Ä–æ–π–∫–∏:</i> {obj['year']}\n"
        f"<i>–ê–¥—Ä–µ—Å:</i> {obj['address']}\n\n"
        f"{obj['description']}"
    )

    back_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data="back_to_menu")]
    ])

    try:
        await context.bot.send_photo(
            chat_id=query.message.chat.id,
            photo=obj['photo'],
            caption=message_text,
            parse_mode='HTML',
            reply_markup=back_button
        )
        try:
            await query.message.delete()
        except BadRequest as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        try:
            await query.edit_message_text(
                text=message_text,
                parse_mode='HTML',
                reply_markup=back_button
            )
        except BadRequest:
            await query.message.reply_text(
                text=message_text,
                parse_mode='HTML',
                reply_markup=back_button
            )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    if query.data == "about":
        try:
            await query.edit_message_text(
                "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —Å–æ–≤–µ—Ç—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –†—ã–±–∏–Ω—Å–∫–∞.\n"
                "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ –æ–±—Ä–∞–∑—Ü—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start",
                reply_markup=None
            )
        except BadRequest:
            await query.message.reply_text(
                "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å —Å–æ–≤–µ—Ç—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –†—ã–±–∏–Ω—Å–∫–∞.\n"
                "–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã –Ω–∞–∏–±–æ–ª–µ–µ –∑–Ω–∞—á–∏–º—ã–µ –æ–±—Ä–∞–∑—Ü—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–æ–≤–µ—Ç—Å–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.\n\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start"
            )
    elif query.data == "back_to_menu":
        await start(update, context)
    elif query.data in arch_objects:
        await show_architecture_object(update, context, query.data)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –æ–±—ä–µ–∫—Ç —Å–æ–≤–µ—Ç—Å–∫–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –†—ã–±–∏–Ω—Å–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."
    )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
        return

    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()


if __name__ == "__main__":
    main()